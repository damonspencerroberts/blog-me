[{"/Users/damonroberts/Desktop/blogme/src/index.js":"1","/Users/damonroberts/Desktop/blogme/src/App.js":"2","/Users/damonroberts/Desktop/blogme/src/Containers/Home.js":"3","/Users/damonroberts/Desktop/blogme/src/Components/Posts/Posts.js":"4","/Users/damonroberts/Desktop/blogme/src/Components/Individual-Post/Post.js":"5","/Users/damonroberts/Desktop/blogme/src/Components/Logo/Logo.js":"6","/Users/damonroberts/Desktop/blogme/src/Components/Button/Button.js":"7","/Users/damonroberts/Desktop/blogme/src/Axios.js":"8","/Users/damonroberts/Desktop/blogme/src/json-data/json-data.js":"9","/Users/damonroberts/Desktop/blogme/src/Components/new-post/new-post.js":"10","/Users/damonroberts/Desktop/blogme/src/Components/New-Post/new-post.js":"11","/Users/damonroberts/Desktop/blogme/src/Components/Spinner/spinner.js":"12","/Users/damonroberts/Desktop/blogme/src/Components/Footer/footer.js":"13"},{"size":176,"mtime":1608420392326,"results":"14","hashOfConfig":"15"},{"size":174,"mtime":1608071598420,"results":"16","hashOfConfig":"15"},{"size":3065,"mtime":1608424697879,"results":"17","hashOfConfig":"15"},{"size":1071,"mtime":1608389437652,"results":"18","hashOfConfig":"15"},{"size":1211,"mtime":1608423887256,"results":"19","hashOfConfig":"15"},{"size":395,"mtime":1608332269739,"results":"20","hashOfConfig":"15"},{"size":226,"mtime":1608331714885,"results":"21","hashOfConfig":"15"},{"size":471,"mtime":1608334133587,"results":"22","hashOfConfig":"15"},{"size":10698,"mtime":1608338567580,"results":"23","hashOfConfig":"15"},{"size":4913,"mtime":1608424184127,"results":"24","hashOfConfig":"15"},{"size":2998,"mtime":1608340694196,"results":"25","hashOfConfig":"15"},{"size":183,"mtime":1608391511923,"results":"26","hashOfConfig":"15"},{"size":273,"mtime":1608424619286,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dhja5y",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/damonroberts/Desktop/blogme/src/index.js",[],"/Users/damonroberts/Desktop/blogme/src/App.js",[],["57","58"],"/Users/damonroberts/Desktop/blogme/src/Containers/Home.js",[],"/Users/damonroberts/Desktop/blogme/src/Components/Posts/Posts.js",[],"/Users/damonroberts/Desktop/blogme/src/Components/Individual-Post/Post.js",[],"/Users/damonroberts/Desktop/blogme/src/Components/Logo/Logo.js",[],"/Users/damonroberts/Desktop/blogme/src/Components/Button/Button.js",[],"/Users/damonroberts/Desktop/blogme/src/Axios.js",[],"/Users/damonroberts/Desktop/blogme/src/json-data/json-data.js",[],["59","60"],"/Users/damonroberts/Desktop/blogme/src/Components/new-post/new-post.js",["61"],"import React, { useState } from 'react';\nimport classes from \"./Form.module.css\";\nimport ButtonIs from \"../Button/Button\";\nimport axios from \"../../Axios\";\nimport Spinner from \"../Spinner/spinner\";\nimport ImageUploader from \"react-images-upload\";\n\n\nconst NewPostForm = (props) => {\n    const [author, setAuthor] = useState(\"\");\n    const [title, setTitle] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n    const [spinner, setSpinner] = useState(false);\n    const [error, setError] = useState(false);\n    const [pictures, setPictures] = useState([]);\n\n    const submitForm = () => {\n        setSpinner(true);\n        const currentDate = new Date();\n        const year = currentDate.getFullYear();\n        const month = currentDate.getMonth()+1;\n        const day = currentDate.getDate();\n\n        const fullDate = `${day}/${month}/${year}`;\n\n\n        const post = {\n            title: title,\n            author: author,\n            content: content,\n            date: fullDate,\n            image: pictures\n        }\n        \n        if (post.title !== \"\" && post.author !== \"\" && post.content !== \"\") {\n            axios.post('/blog-post.json', post)\n                .then(response => {\n                    console.log(\"Success\");\n                    setSpinner(false);\n                    setError(false);\n                    setAuthor(\"\");\n                    setTitle(\"\");\n                    setContent(\"\");\n                })\n                    \n                .catch(error => {\n                    alert(error);\n            });\n        } else {\n            setSpinner(false);\n            setError(true);\n        }\n        \n    }\n\n    const onDrop = picture => {\n            let reader = new FileReader();\n            let url = reader.readAsDataURL(picture[0]);\n            reader.onloadend = function (e) {\n            setPictures(reader.result);\n        };\n    };\n\n    console.log(pictures);\n\n\n    return(<React.Fragment>\n            {spinner ? <Spinner /> : <div id = \"new-form\">\n                <hr className = {classes.Horizontal} />\n                <div className = {classes.Form}>\n                    <h1>New Post</h1>\n                    {error ? <p style = {{color: \"red\"}}>Please dont leave any fields blank!</p> : null}\n                    <form>\n                        <div>\n                        <label>Author Name</label>  \n                            <div>\n                                <input \n                                    id=\"textinput\" \n                                    name=\"textinput\" \n                                    type=\"text\" \n                                    value = {author}\n                                    onChange = {(event) => setAuthor(event.target.value)}\n                                    required\n                                />\n                            </div>\n                        </div>\n\n                        <div>\n                        <label>Blog Title</label>  \n                            <div>\n                                <input \n                                    id=\"textinput\" \n                                    name=\"textinput\" \n                                    type=\"text\" \n                                    value = {title}\n                                    onChange = {(event) => setTitle(event.target.value)}\n                                    required\n                                />\n                            </div>\n                        \n                        </div>\n                        <div>\n                            <label>Blog Content</label>\n                            <div>                     \n                                <textarea  \n                                id=\"textarea\" \n                                name=\"textarea\"\n                                value = {content}\n                                onChange = {(event) => setContent(event.target.value)}\n                                required\n                                ></textarea>\n                            </div>\n                        </div>\n\n                        <div style = {{margin: \"10px 200px\"}}>\n                            <label>Add a photo</label>\n                            <ImageUploader\n                                {...props}\n                                withIcon={true}\n                                onChange={onDrop}\n                                imgExtension={[\".jpg\",\".jpeg\", \".gif\", \".png\", \".gif\"]}\n                                maxFileSize={5242880}\n                                withPreview={true}\n                            />\n                        </div>\n\n                        <div>\n                            <ButtonIs text = \"Post Blog\" clicked = {submitForm}/>\n                        </div>\n                    </form>\n                </div>\n            </div>}\n        </React.Fragment>\n    );\n}\n\nexport default NewPostForm;\n","/Users/damonroberts/Desktop/blogme/src/Components/New-Post/new-post.js",[],"/Users/damonroberts/Desktop/blogme/src/Components/Spinner/spinner.js",[],"/Users/damonroberts/Desktop/blogme/src/Components/Footer/footer.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"62","replacedBy":"66"},{"ruleId":"64","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":58,"column":17,"nodeType":"70","messageId":"71","endLine":58,"endColumn":20},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],["72"],["73"],"no-unused-vars","'url' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]